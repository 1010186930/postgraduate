###############################################################################
#                                                                             #
#                                                       16/Aug/2015  09:08:42 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\src\drive #
#                    rs\TFT\lcd.c                                             #
#    Command line =  "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\src\driv #
#                    ers\TFT\lcd.c" -D IAR -D TWR_K60N512 -lCN                #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\FLASH_512KB_PFLASH\List\" -lB              #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\FLASH_512KB_PFLASH\List\" -o               #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\FLASH_512KB_PFLASH\Obj\" --no_cse          #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench 6.0           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\projects\hello_world\" -I     #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\common\" -I                   #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\cpu\" -I                      #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\cpu\headers\" -I              #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\drivers\adc16\" -I            #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\drivers\enet\" -I             #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\drivers\pmc\" -I              #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\drivers\rtc\" -I              #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\drivers\lptmr\" -I            #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\drivers\uart\" -I             #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\drivers\mcg\" -I              #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\drivers\wdog\" -I             #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\platforms\" -I                #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\drivers\ftm\" -I              #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\drivers\SPI\" -I              #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\drivers\OLED\" -I             #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\..\..\src\drivers\TFT\" -I              #
#                    "C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\ia #
#                    r\hello_world\..\" -Ol --use_c++_inline                  #
#    List file    =  C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\iar #
#                    \hello_world\FLASH_512KB_PFLASH\List\lcd.lst             #
#    Object file  =  C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\build\iar #
#                    \hello_world\FLASH_512KB_PFLASH\Obj\lcd.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Ping\Desktop\K60_TFT144_SPI(hardware)\src\drivers\TFT\lcd.c
      1          #include "lcd.h"
      2          #include "stdlib.h"
      3          //////////////////////////////////////////////////////////////////////////////////	
      4          /****************************************************************************************************
      5          //=======================================液晶屏数据线接线==========================================//
      6          //CS		接PB11	//片选信号
      7          //CLK	    接PB13	//SPI时钟信号
      8          //SDI(DIN)	接PB15	//SPI总线数据信号
      9          //=======================================液晶屏控制线接线==========================================//
     10          //LED	    接PB9	//背光控制信号，高电平点亮
     11          //RS(D/C)   接PB10	//寄存器/数据选择信号(RS=0数据总线发送的是指令；RS=1数据总线发送的是像素数据)
     12          //RST	    接PB12	//液晶屏复位信号，低电平复位
     13          /////////////////////////////////////////////////////////////////////////////////////////////////
     14          //==================================如何精简到只需要3个IO=======================================//
     15          //1.CS信号可以精简，不作SPI复用片选可将CS接地常低，节省1个IO
     16          //2.LED背光控制信号可以接高电平3.3V背光常亮，节省1个IO
     17          //3.RST复位信号可以接到单片机的复位端，利用系统上电复位，节省1个IO
     18          //==================================如何切换横竖屏显示=======================================//
     19          //打开lcd.h头文件，修改宏#define USE_HORIZONTAL 值为0使用竖屏模式.1,使用横屏模式
     20          //===========================如何切换模拟SPI总线驱动和硬件SPI总线驱动=========================//
     21          //打开lcd.h头文件，修改宏#define USE_HARDWARE_SPI  值为0使用模拟SPI总线.1,使用硬件SPI总线
     22          **************************************************************************************************/	
     23          
     24          	   
     25          //管理LCD重要参数
     26          //默认为竖屏

   \                                 In section .bss, align 4
     27          _lcd_dev lcddev;
   \                     lcddev:
   \   00000000                      DS8 16
     28          
     29          //画笔颜色,背景颜色

   \                                 In section .bss, align 2
     30          u16 POINT_COLOR = 0x0000,BACK_COLOR = 0xFFFF;  
   \                     POINT_COLOR:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
   \                     BACK_COLOR:
   \   00000000   0xFFFF             DC16 65535

   \                                 In section .bss, align 2
     31          u16 DeviceCode;	 
   \                     DeviceCode:
   \   00000000                      DS8 2
     32          
     33          
     34          //******************************************************************
     35          //函数名：  LCD_WR_REG
     36          //功能：    向液晶屏总线写入写16位指令
     37          //输入参数：Reg:待写入的指令值
     38          //返回值：  无
     39          //修改记录：无
     40          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
     41          void LCD_WR_REG(u16 data)
     42          { 
   \                     LCD_WR_REG:
   \   00000000   0xB580             PUSH     {R7,LR}
     43             LCD_CS_CLR;
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000006   0x6889             LDR      R1,[R1, #+8]
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0xF431 0x7180      BICS     R1,R1,#0x100
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable8
   \   00000012   0x6892             LDR      R2,[R2, #+8]
   \   00000014   0x6011             STR      R1,[R2, #+0]
     44             LCD_RS_CLR;
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable8
   \   0000001A   0x6889             LDR      R1,[R1, #+8]
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0xF431 0x6180      BICS     R1,R1,#0x400
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable8
   \   00000026   0x6892             LDR      R2,[R2, #+8]
   \   00000028   0x6011             STR      R1,[R2, #+0]
     45             SPI_Master_WriteRead(SPI0,data,SPI_PCS4,SPI_PCS_ASSERTED);
   \   0000002A   0x2301             MOVS     R3,#+1
   \   0000002C   0x2210             MOVS     R2,#+16
   \   0000002E   0x0001             MOVS     R1,R0
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       SPI_Master_WriteRead
     46             LCD_CS_SET;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable8
   \   0000003C   0x6880             LDR      R0,[R0, #+8]
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xF44F 0x7180      MOV      R1,#+256
   \   00000044   0x4308             ORRS     R0,R1,R0
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable8
   \   0000004A   0x6889             LDR      R1,[R1, #+8]
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     47          }
   \   0000004E   0xBD01             POP      {R0,PC}          ;; return
     48          
     49          //******************************************************************
     50          //函数名：  LCD_WR_DATA
     51          //功能：    向液晶屏总线写入写8位数据
     52          //输入参数：Data:待写入的数据
     53          //返回值：  无
     54          //修改记录：无
     55          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
     56          void LCD_WR_DATA(u8 data)
     57          {
   \                     LCD_WR_DATA:
   \   00000000   0xB580             PUSH     {R7,LR}
     58          	
     59             LCD_CS_CLR;
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000006   0x6889             LDR      R1,[R1, #+8]
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0xF431 0x7180      BICS     R1,R1,#0x100
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable8
   \   00000012   0x6892             LDR      R2,[R2, #+8]
   \   00000014   0x6011             STR      R1,[R2, #+0]
     60             LCD_RS_SET;
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable8
   \   0000001A   0x6889             LDR      R1,[R1, #+8]
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0xF451 0x6180      ORRS     R1,R1,#0x400
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable8
   \   00000026   0x6892             LDR      R2,[R2, #+8]
   \   00000028   0x6011             STR      R1,[R2, #+0]
     61             SPI_Master_WriteRead(SPI0,data,SPI_PCS4,SPI_PCS_ASSERTED);
   \   0000002A   0x2301             MOVS     R3,#+1
   \   0000002C   0x2210             MOVS     R2,#+16
   \   0000002E   0x0001             MOVS     R1,R0
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       SPI_Master_WriteRead
     62             LCD_CS_SET;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable8
   \   0000003C   0x6880             LDR      R0,[R0, #+8]
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0xF44F 0x7180      MOV      R1,#+256
   \   00000044   0x4308             ORRS     R0,R1,R0
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable8
   \   0000004A   0x6889             LDR      R1,[R1, #+8]
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     63          
     64          }
   \   0000004E   0xBD01             POP      {R0,PC}          ;; return
     65          //******************************************************************
     66          //函数名：  LCD_DrawPoint_16Bit
     67          //功能：    8位总线下如何写入一个16位数据
     68          //输入参数：(x,y):光标坐标
     69          //返回值：  无
     70          //修改记录：无
     71          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
     72          void LCD_WR_DATA_16Bit(u16 data)
     73          {	
   \                     LCD_WR_DATA_16Bit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     74             LCD_CS_CLR;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable8
   \   00000008   0x6880             LDR      R0,[R0, #+8]
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF430 0x7080      BICS     R0,R0,#0x100
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000014   0x6889             LDR      R1,[R1, #+8]
   \   00000016   0x6008             STR      R0,[R1, #+0]
     75             LCD_RS_SET;
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable8
   \   0000001C   0x6880             LDR      R0,[R0, #+8]
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000028   0x6889             LDR      R1,[R1, #+8]
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     76          
     77             SPI_Master_WriteRead(SPI0,data>>8,SPI_PCS4,SPI_PCS_ASSERTED);
   \   0000002C   0x2301             MOVS     R3,#+1
   \   0000002E   0x2210             MOVS     R2,#+16
   \   00000030   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000032   0x0A21             LSRS     R1,R4,#+8
   \   00000034   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       SPI_Master_WriteRead
     78          
     79             SPI_Master_WriteRead(SPI0,data,SPI_PCS4,SPI_PCS_ASSERTED);
   \   0000003C   0x2301             MOVS     R3,#+1
   \   0000003E   0x2210             MOVS     R2,#+16
   \   00000040   0x0021             MOVS     R1,R4
   \   00000042   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      BL       SPI_Master_WriteRead
     80          
     81             LCD_CS_SET;
   \   0000004A   0x....             LDR.N    R0,??DataTable8
   \   0000004C   0x6880             LDR      R0,[R0, #+8]
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0xF44F 0x7180      MOV      R1,#+256
   \   00000054   0x4308             ORRS     R0,R1,R0
   \   00000056   0x....             LDR.N    R1,??DataTable8
   \   00000058   0x6889             LDR      R1,[R1, #+8]
   \   0000005A   0x6008             STR      R0,[R1, #+0]
     82          }
   \   0000005C   0xBD10             POP      {R4,PC}          ;; return
     83          
     84          //******************************************************************
     85          //函数名：  LCD_WriteReg
     86          //功能：    写寄存器数据
     87          //输入参数：LCD_Reg:寄存器地址
     88          //			LCD_RegValue:要写入的数据
     89          //返回值：  无
     90          //修改记录：无
     91          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
     92          void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
     93          {	
   \                     LCD_WriteReg:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
     94          	LCD_WR_REG(LCD_Reg);  
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x.... 0x....      BL       LCD_WR_REG
     95          	LCD_WR_DATA(LCD_RegValue);	    		 
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       LCD_WR_DATA
     96          }	   
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     97          	 
     98          //******************************************************************
     99          //函数名：  LCD_WriteRAM_Prepare
    100          //功能：    开始写GRAM
    101          //			在给液晶屏传送RGB数据前，应该发送写GRAM指令
    102          //输入参数：无
    103          //返回值：  无
    104          //修改记录：无
    105          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
    106          void LCD_WriteRAM_Prepare(void)
    107          {
   \                     LCD_WriteRAM_Prepare:
   \   00000000   0xB580             PUSH     {R7,LR}
    108          	LCD_WR_REG(lcddev.wramcmd);
   \   00000002   0x....             LDR.N    R0,??DataTable8_1
   \   00000004   0x8900             LDRH     R0,[R0, #+8]
   \   00000006   0x.... 0x....      BL       LCD_WR_REG
    109          }	 
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    110          
    111          //******************************************************************
    112          //函数名：  LCD_DrawPoint
    113          //功能：    在指定位置写入一个像素点数据
    114          //输入参数：(x,y):光标坐标
    115          //返回值：  无
    116          //修改记录：无
    117          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
    118          void LCD_DrawPoint(u16 x,u16 y)
    119          {
   \                     LCD_DrawPoint:
   \   00000000   0xB580             PUSH     {R7,LR}
    120          	LCD_SetCursor(x,y);//设置光标位置 
   \   00000002   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x.... 0x....      BL       LCD_SetCursor
    121          	LCD_WR_DATA_16Bit(POINT_COLOR);
   \   0000000A   0x....             LDR.N    R0,??DataTable8_2
   \   0000000C   0x8800             LDRH     R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       LCD_WR_DATA_16Bit
    122          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    123          
    124          
    125          //******************************************************************
    126          //函数名：  LCD_Reset
    127          //功能：    LCD复位函数，液晶初始化前要调用此函数
    128          //输入参数：无
    129          //返回值：  无
    130          //修改记录：无
    131          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
    132          void LCD_RESET(void)
    133          {
   \                     LCD_RESET:
   \   00000000   0xB580             PUSH     {R7,LR}
    134          	LCD_RST_CLR;
   \   00000002   0x....             LDR.N    R0,??DataTable8
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF430 0x7000      BICS     R0,R0,#0x200
   \   0000000C   0x....             LDR.N    R1,??DataTable8
   \   0000000E   0x6889             LDR      R1,[R1, #+8]
   \   00000010   0x6008             STR      R0,[R1, #+0]
    135          	delay_ms(0xffff);	
   \   00000012   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000016   0x.... 0x....      BL       delay_ms
    136          	LCD_RST_SET;
   \   0000001A   0x....             LDR.N    R0,??DataTable8
   \   0000001C   0x6880             LDR      R0,[R0, #+8]
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF44F 0x7100      MOV      R1,#+512
   \   00000024   0x4308             ORRS     R0,R1,R0
   \   00000026   0x....             LDR.N    R1,??DataTable8
   \   00000028   0x6889             LDR      R1,[R1, #+8]
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    137          	delay_ms(0xffff);
   \   0000002C   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000030   0x.... 0x....      BL       delay_ms
    138          }
   \   00000034   0xBD01             POP      {R0,PC}          ;; return
    139           	 
    140          //******************************************************************
    141          //函数名：  LCD_Init
    142          //功能：    LCD初始化
    143          //输入参数：无
    144          //返回值：  无
    145          //修改记录：无
    146          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
    147          void LCD_Init(void)
    148          {  
   \                     LCD_Init:
   \   00000000   0xB580             PUSH     {R7,LR}
    149          //#if USE_HARDWARE_SPI //使用硬件SPI
    150          //	SPI2_Init();
    151          //#else	
    152          //	LCD_GPIOInit();//使用模拟SPI
    153          //#endif  										 
    154          
    155           	LCD_RESET(); //液晶屏复位
   \   00000002   0x.... 0x....      BL       LCD_RESET
    156          
    157          	//************* Start Initial Sequence **********//		
    158          	//开始初始化液晶屏
    159          	LCD_WR_REG(0x11);//Sleep exit 
   \   00000006   0x2011             MOVS     R0,#+17
   \   00000008   0x.... 0x....      BL       LCD_WR_REG
    160          	delay_ms (0xffff);		
   \   0000000C   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000010   0x.... 0x....      BL       delay_ms
    161          	//ST7735R Frame Rate
    162          	LCD_WR_REG(0xB1); 
   \   00000014   0x20B1             MOVS     R0,#+177
   \   00000016   0x.... 0x....      BL       LCD_WR_REG
    163          	LCD_WR_DATA(0x01); 
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      BL       LCD_WR_DATA
    164          	LCD_WR_DATA(0x2C); 
   \   00000020   0x202C             MOVS     R0,#+44
   \   00000022   0x.... 0x....      BL       LCD_WR_DATA
    165          	LCD_WR_DATA(0x2D); 
   \   00000026   0x202D             MOVS     R0,#+45
   \   00000028   0x.... 0x....      BL       LCD_WR_DATA
    166          
    167          	LCD_WR_REG(0xB2); 
   \   0000002C   0x20B2             MOVS     R0,#+178
   \   0000002E   0x.... 0x....      BL       LCD_WR_REG
    168          	LCD_WR_DATA(0x01); 
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x.... 0x....      BL       LCD_WR_DATA
    169          	LCD_WR_DATA(0x2C); 
   \   00000038   0x202C             MOVS     R0,#+44
   \   0000003A   0x.... 0x....      BL       LCD_WR_DATA
    170          	LCD_WR_DATA(0x2D); 
   \   0000003E   0x202D             MOVS     R0,#+45
   \   00000040   0x.... 0x....      BL       LCD_WR_DATA
    171          
    172          	LCD_WR_REG(0xB3); 
   \   00000044   0x20B3             MOVS     R0,#+179
   \   00000046   0x.... 0x....      BL       LCD_WR_REG
    173          	LCD_WR_DATA(0x01); 
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      BL       LCD_WR_DATA
    174          	LCD_WR_DATA(0x2C); 
   \   00000050   0x202C             MOVS     R0,#+44
   \   00000052   0x.... 0x....      BL       LCD_WR_DATA
    175          	LCD_WR_DATA(0x2D); 
   \   00000056   0x202D             MOVS     R0,#+45
   \   00000058   0x.... 0x....      BL       LCD_WR_DATA
    176          	LCD_WR_DATA(0x01); 
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x.... 0x....      BL       LCD_WR_DATA
    177          	LCD_WR_DATA(0x2C); 
   \   00000062   0x202C             MOVS     R0,#+44
   \   00000064   0x.... 0x....      BL       LCD_WR_DATA
    178          	LCD_WR_DATA(0x2D); 
   \   00000068   0x202D             MOVS     R0,#+45
   \   0000006A   0x.... 0x....      BL       LCD_WR_DATA
    179          	
    180          	LCD_WR_REG(0xB4); //Column inversion 
   \   0000006E   0x20B4             MOVS     R0,#+180
   \   00000070   0x.... 0x....      BL       LCD_WR_REG
    181          	LCD_WR_DATA(0x07); 
   \   00000074   0x2007             MOVS     R0,#+7
   \   00000076   0x.... 0x....      BL       LCD_WR_DATA
    182          	
    183          	//ST7735R Power Sequence
    184          	LCD_WR_REG(0xC0); 
   \   0000007A   0x20C0             MOVS     R0,#+192
   \   0000007C   0x.... 0x....      BL       LCD_WR_REG
    185          	LCD_WR_DATA(0xA2); 
   \   00000080   0x20A2             MOVS     R0,#+162
   \   00000082   0x.... 0x....      BL       LCD_WR_DATA
    186          	LCD_WR_DATA(0x02); 
   \   00000086   0x2002             MOVS     R0,#+2
   \   00000088   0x.... 0x....      BL       LCD_WR_DATA
    187          	LCD_WR_DATA(0x84); 
   \   0000008C   0x2084             MOVS     R0,#+132
   \   0000008E   0x.... 0x....      BL       LCD_WR_DATA
    188          	LCD_WR_REG(0xC1); 
   \   00000092   0x20C1             MOVS     R0,#+193
   \   00000094   0x.... 0x....      BL       LCD_WR_REG
    189          	LCD_WR_DATA(0xC5); 
   \   00000098   0x20C5             MOVS     R0,#+197
   \   0000009A   0x.... 0x....      BL       LCD_WR_DATA
    190          
    191          	LCD_WR_REG(0xC2); 
   \   0000009E   0x20C2             MOVS     R0,#+194
   \   000000A0   0x.... 0x....      BL       LCD_WR_REG
    192          	LCD_WR_DATA(0x0A); 
   \   000000A4   0x200A             MOVS     R0,#+10
   \   000000A6   0x.... 0x....      BL       LCD_WR_DATA
    193          	LCD_WR_DATA(0x00); 
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x.... 0x....      BL       LCD_WR_DATA
    194          
    195          	LCD_WR_REG(0xC3); 
   \   000000B0   0x20C3             MOVS     R0,#+195
   \   000000B2   0x.... 0x....      BL       LCD_WR_REG
    196          	LCD_WR_DATA(0x8A); 
   \   000000B6   0x208A             MOVS     R0,#+138
   \   000000B8   0x.... 0x....      BL       LCD_WR_DATA
    197          	LCD_WR_DATA(0x2A); 
   \   000000BC   0x202A             MOVS     R0,#+42
   \   000000BE   0x.... 0x....      BL       LCD_WR_DATA
    198          	LCD_WR_REG(0xC4); 
   \   000000C2   0x20C4             MOVS     R0,#+196
   \   000000C4   0x.... 0x....      BL       LCD_WR_REG
    199          	LCD_WR_DATA(0x8A); 
   \   000000C8   0x208A             MOVS     R0,#+138
   \   000000CA   0x.... 0x....      BL       LCD_WR_DATA
    200          	LCD_WR_DATA(0xEE); 
   \   000000CE   0x20EE             MOVS     R0,#+238
   \   000000D0   0x.... 0x....      BL       LCD_WR_DATA
    201          	
    202          	LCD_WR_REG(0xC5); //VCOM 
   \   000000D4   0x20C5             MOVS     R0,#+197
   \   000000D6   0x.... 0x....      BL       LCD_WR_REG
    203          	LCD_WR_DATA(0x0E); 
   \   000000DA   0x200E             MOVS     R0,#+14
   \   000000DC   0x.... 0x....      BL       LCD_WR_DATA
    204          	
    205          	LCD_WR_REG(0x36); //MX, MY, RGB mode 				 
   \   000000E0   0x2036             MOVS     R0,#+54
   \   000000E2   0x.... 0x....      BL       LCD_WR_REG
    206          	LCD_WR_DATA(0xC8); 
   \   000000E6   0x20C8             MOVS     R0,#+200
   \   000000E8   0x.... 0x....      BL       LCD_WR_DATA
    207          	
    208          	//ST7735R Gamma Sequence
    209          	LCD_WR_REG(0xe0); 
   \   000000EC   0x20E0             MOVS     R0,#+224
   \   000000EE   0x.... 0x....      BL       LCD_WR_REG
    210          	LCD_WR_DATA(0x0f); 
   \   000000F2   0x200F             MOVS     R0,#+15
   \   000000F4   0x.... 0x....      BL       LCD_WR_DATA
    211          	LCD_WR_DATA(0x1a); 
   \   000000F8   0x201A             MOVS     R0,#+26
   \   000000FA   0x.... 0x....      BL       LCD_WR_DATA
    212          	LCD_WR_DATA(0x0f); 
   \   000000FE   0x200F             MOVS     R0,#+15
   \   00000100   0x.... 0x....      BL       LCD_WR_DATA
    213          	LCD_WR_DATA(0x18); 
   \   00000104   0x2018             MOVS     R0,#+24
   \   00000106   0x.... 0x....      BL       LCD_WR_DATA
    214          	LCD_WR_DATA(0x2f); 
   \   0000010A   0x202F             MOVS     R0,#+47
   \   0000010C   0x.... 0x....      BL       LCD_WR_DATA
    215          	LCD_WR_DATA(0x28); 
   \   00000110   0x2028             MOVS     R0,#+40
   \   00000112   0x.... 0x....      BL       LCD_WR_DATA
    216          	LCD_WR_DATA(0x20); 
   \   00000116   0x2020             MOVS     R0,#+32
   \   00000118   0x.... 0x....      BL       LCD_WR_DATA
    217          	LCD_WR_DATA(0x22); 
   \   0000011C   0x2022             MOVS     R0,#+34
   \   0000011E   0x.... 0x....      BL       LCD_WR_DATA
    218          	LCD_WR_DATA(0x1f); 
   \   00000122   0x201F             MOVS     R0,#+31
   \   00000124   0x.... 0x....      BL       LCD_WR_DATA
    219          	LCD_WR_DATA(0x1b); 
   \   00000128   0x201B             MOVS     R0,#+27
   \   0000012A   0x.... 0x....      BL       LCD_WR_DATA
    220          	LCD_WR_DATA(0x23); 
   \   0000012E   0x2023             MOVS     R0,#+35
   \   00000130   0x.... 0x....      BL       LCD_WR_DATA
    221          	LCD_WR_DATA(0x37); 
   \   00000134   0x2037             MOVS     R0,#+55
   \   00000136   0x.... 0x....      BL       LCD_WR_DATA
    222          	LCD_WR_DATA(0x00); 	
   \   0000013A   0x2000             MOVS     R0,#+0
   \   0000013C   0x.... 0x....      BL       LCD_WR_DATA
    223          	LCD_WR_DATA(0x07); 
   \   00000140   0x2007             MOVS     R0,#+7
   \   00000142   0x.... 0x....      BL       LCD_WR_DATA
    224          	LCD_WR_DATA(0x02); 
   \   00000146   0x2002             MOVS     R0,#+2
   \   00000148   0x.... 0x....      BL       LCD_WR_DATA
    225          	LCD_WR_DATA(0x10); 
   \   0000014C   0x2010             MOVS     R0,#+16
   \   0000014E   0x.... 0x....      BL       LCD_WR_DATA
    226          
    227          	LCD_WR_REG(0xe1); 
   \   00000152   0x20E1             MOVS     R0,#+225
   \   00000154   0x.... 0x....      BL       LCD_WR_REG
    228          	LCD_WR_DATA(0x0f); 
   \   00000158   0x200F             MOVS     R0,#+15
   \   0000015A   0x.... 0x....      BL       LCD_WR_DATA
    229          	LCD_WR_DATA(0x1b); 
   \   0000015E   0x201B             MOVS     R0,#+27
   \   00000160   0x.... 0x....      BL       LCD_WR_DATA
    230          	LCD_WR_DATA(0x0f); 
   \   00000164   0x200F             MOVS     R0,#+15
   \   00000166   0x.... 0x....      BL       LCD_WR_DATA
    231          	LCD_WR_DATA(0x17); 
   \   0000016A   0x2017             MOVS     R0,#+23
   \   0000016C   0x.... 0x....      BL       LCD_WR_DATA
    232          	LCD_WR_DATA(0x33); 
   \   00000170   0x2033             MOVS     R0,#+51
   \   00000172   0x.... 0x....      BL       LCD_WR_DATA
    233          	LCD_WR_DATA(0x2c); 
   \   00000176   0x202C             MOVS     R0,#+44
   \   00000178   0x.... 0x....      BL       LCD_WR_DATA
    234          	LCD_WR_DATA(0x29); 
   \   0000017C   0x2029             MOVS     R0,#+41
   \   0000017E   0x.... 0x....      BL       LCD_WR_DATA
    235          	LCD_WR_DATA(0x2e); 
   \   00000182   0x202E             MOVS     R0,#+46
   \   00000184   0x.... 0x....      BL       LCD_WR_DATA
    236          	LCD_WR_DATA(0x30); 
   \   00000188   0x2030             MOVS     R0,#+48
   \   0000018A   0x.... 0x....      BL       LCD_WR_DATA
    237          	LCD_WR_DATA(0x30); 
   \   0000018E   0x2030             MOVS     R0,#+48
   \   00000190   0x.... 0x....      BL       LCD_WR_DATA
    238          	LCD_WR_DATA(0x39); 
   \   00000194   0x2039             MOVS     R0,#+57
   \   00000196   0x.... 0x....      BL       LCD_WR_DATA
    239          	LCD_WR_DATA(0x3f); 
   \   0000019A   0x203F             MOVS     R0,#+63
   \   0000019C   0x.... 0x....      BL       LCD_WR_DATA
    240          	LCD_WR_DATA(0x00); 
   \   000001A0   0x2000             MOVS     R0,#+0
   \   000001A2   0x.... 0x....      BL       LCD_WR_DATA
    241          	LCD_WR_DATA(0x07); 
   \   000001A6   0x2007             MOVS     R0,#+7
   \   000001A8   0x.... 0x....      BL       LCD_WR_DATA
    242          	LCD_WR_DATA(0x03); 
   \   000001AC   0x2003             MOVS     R0,#+3
   \   000001AE   0x.... 0x....      BL       LCD_WR_DATA
    243          	LCD_WR_DATA(0x10);  
   \   000001B2   0x2010             MOVS     R0,#+16
   \   000001B4   0x.... 0x....      BL       LCD_WR_DATA
    244          	
    245          	LCD_WR_REG(0x2a);
   \   000001B8   0x202A             MOVS     R0,#+42
   \   000001BA   0x.... 0x....      BL       LCD_WR_REG
    246          	LCD_WR_DATA(0x00);
   \   000001BE   0x2000             MOVS     R0,#+0
   \   000001C0   0x.... 0x....      BL       LCD_WR_DATA
    247          	LCD_WR_DATA(0x00);
   \   000001C4   0x2000             MOVS     R0,#+0
   \   000001C6   0x.... 0x....      BL       LCD_WR_DATA
    248          	LCD_WR_DATA(0x00);
   \   000001CA   0x2000             MOVS     R0,#+0
   \   000001CC   0x.... 0x....      BL       LCD_WR_DATA
    249          	LCD_WR_DATA(0x7f);
   \   000001D0   0x207F             MOVS     R0,#+127
   \   000001D2   0x.... 0x....      BL       LCD_WR_DATA
    250          
    251          	LCD_WR_REG(0x2b);
   \   000001D6   0x202B             MOVS     R0,#+43
   \   000001D8   0x.... 0x....      BL       LCD_WR_REG
    252          	LCD_WR_DATA(0x00);
   \   000001DC   0x2000             MOVS     R0,#+0
   \   000001DE   0x.... 0x....      BL       LCD_WR_DATA
    253          	LCD_WR_DATA(0x00);
   \   000001E2   0x2000             MOVS     R0,#+0
   \   000001E4   0x.... 0x....      BL       LCD_WR_DATA
    254          	LCD_WR_DATA(0x00);
   \   000001E8   0x2000             MOVS     R0,#+0
   \   000001EA   0x.... 0x....      BL       LCD_WR_DATA
    255          	LCD_WR_DATA(0x9f);
   \   000001EE   0x209F             MOVS     R0,#+159
   \   000001F0   0x.... 0x....      BL       LCD_WR_DATA
    256          	
    257          	LCD_WR_REG(0xF0); //Enable test command  
   \   000001F4   0x20F0             MOVS     R0,#+240
   \   000001F6   0x.... 0x....      BL       LCD_WR_REG
    258          	LCD_WR_DATA(0x01); 
   \   000001FA   0x2001             MOVS     R0,#+1
   \   000001FC   0x.... 0x....      BL       LCD_WR_DATA
    259          	LCD_WR_REG(0xF6); //Disable ram power save mode 
   \   00000200   0x20F6             MOVS     R0,#+246
   \   00000202   0x.... 0x....      BL       LCD_WR_REG
    260          	LCD_WR_DATA(0x00); 
   \   00000206   0x2000             MOVS     R0,#+0
   \   00000208   0x.... 0x....      BL       LCD_WR_DATA
    261          	
    262          	LCD_WR_REG(0x3A); //65k mode 
   \   0000020C   0x203A             MOVS     R0,#+58
   \   0000020E   0x.... 0x....      BL       LCD_WR_REG
    263          	LCD_WR_DATA(0x05); 	
   \   00000212   0x2005             MOVS     R0,#+5
   \   00000214   0x.... 0x....      BL       LCD_WR_DATA
    264          	LCD_WR_REG(0x29);//Display on	
   \   00000218   0x2029             MOVS     R0,#+41
   \   0000021A   0x.... 0x....      BL       LCD_WR_REG
    265          
    266          	LCD_SetParam();//设置LCD参数	 
   \   0000021E   0x.... 0x....      BL       LCD_SetParam
    267          //	LCD_LED_SET;//点亮背光	 
    268          	//LCD_Clear(WHITE);
    269          }
   \   00000222   0xBD01             POP      {R0,PC}          ;; return
    270          //******************************************************************
    271          //函数名：  LCD_Clear
    272          //功能：    LCD全屏填充清屏函数
    273          //输入参数：Color:要清屏的填充色
    274          //返回值：  无
    275          //修改记录：无
    276          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
    277          void LCD_Clear(u16 Color)
    278          {
   \                     LCD_Clear:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    279          	u16 i,j;      
    280          	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);	  
   \   00000004   0x....             LDR.N    R0,??DataTable8_1
   \   00000006   0x8840             LDRH     R0,[R0, #+2]
   \   00000008   0x1E43             SUBS     R3,R0,#+1
   \   0000000A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000C   0x....             LDR.N    R0,??DataTable8_1
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0x1E42             SUBS     R2,R0,#+1
   \   00000012   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       LCD_SetWindows
    281          	for(i=0;i<lcddev.width;i++)
   \   0000001C   0x2500             MOVS     R5,#+0
   \   0000001E   0xE00A             B.N      ??LCD_Clear_0
    282          	{
    283          		for(j=0;j<lcddev.height;j++)
    284          		LCD_WR_DATA_16Bit(Color);	//写入数据 	 
   \                     ??LCD_Clear_1:
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000024   0x.... 0x....      BL       LCD_WR_DATA_16Bit
   \   00000028   0x1C76             ADDS     R6,R6,#+1
   \                     ??LCD_Clear_2:
   \   0000002A   0x....             LDR.N    R0,??DataTable8_1
   \   0000002C   0x8840             LDRH     R0,[R0, #+2]
   \   0000002E   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000030   0x4286             CMP      R6,R0
   \   00000032   0xD3F5             BCC.N    ??LCD_Clear_1
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LCD_Clear_0:
   \   00000036   0x....             LDR.N    R0,??DataTable8_1
   \   00000038   0x8800             LDRH     R0,[R0, #+0]
   \   0000003A   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000003C   0x4285             CMP      R5,R0
   \   0000003E   0xD201             BCS.N    ??LCD_Clear_3
   \   00000040   0x2600             MOVS     R6,#+0
   \   00000042   0xE7F2             B.N      ??LCD_Clear_2
    285          	}
    286          }   		  
   \                     ??LCD_Clear_3:
   \   00000044   0xBD70             POP      {R4-R6,PC}       ;; return
    287          /*************************************************
    288          函数名：LCD_SetWindows
    289          功能：设置lcd显示窗口，在此区域写点数据自动换行
    290          入口参数：xy起点和终点
    291          返回值：无
    292          *************************************************/

   \                                 In section .text, align 2, keep-with-next
    293          void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
    294          {
   \                     LCD_SetWindows:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    295          #if USE_HORIZONTAL==1	//使用横屏
    296          	LCD_WR_REG(lcddev.setxcmd);	
    297          	LCD_WR_DATA(xStar>>8);
    298          	LCD_WR_DATA(0x00FF&xStar+3);		
    299          	LCD_WR_DATA(xEnd>>8);
    300          	LCD_WR_DATA(0x00FF&xEnd+3);
    301          
    302          	LCD_WR_REG(lcddev.setycmd);	
    303          	LCD_WR_DATA(yStar>>8);
    304          	LCD_WR_DATA(0x00FF&yStar+2);		
    305          	LCD_WR_DATA(yEnd>>8);
    306          	LCD_WR_DATA(0x00FF&yEnd+2);	
    307          
    308          #else
    309          	
    310          	LCD_WR_REG(lcddev.setxcmd);	
   \   0000000A   0x....             LDR.N    R0,??DataTable8_1
   \   0000000C   0x8940             LDRH     R0,[R0, #+10]
   \   0000000E   0x.... 0x....      BL       LCD_WR_REG
    311          	LCD_WR_DATA(xStar>>8);
   \   00000012   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000014   0x0A20             LSRS     R0,R4,#+8
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LCD_WR_DATA
    312          	LCD_WR_DATA(0x00FF&xStar+2);		
   \   0000001C   0x1CA0             ADDS     R0,R4,#+2
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x.... 0x....      BL       LCD_WR_DATA
    313          	LCD_WR_DATA(xEnd>>8);
   \   00000024   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000026   0x0A30             LSRS     R0,R6,#+8
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x.... 0x....      BL       LCD_WR_DATA
    314          	LCD_WR_DATA(0x00FF&xEnd+2);
   \   0000002E   0x1CB0             ADDS     R0,R6,#+2
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x.... 0x....      BL       LCD_WR_DATA
    315          
    316          	LCD_WR_REG(lcddev.setycmd);	
   \   00000036   0x....             LDR.N    R0,??DataTable8_1
   \   00000038   0x8980             LDRH     R0,[R0, #+12]
   \   0000003A   0x.... 0x....      BL       LCD_WR_REG
    317          	LCD_WR_DATA(yStar>>8);
   \   0000003E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000040   0x0A28             LSRS     R0,R5,#+8
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x.... 0x....      BL       LCD_WR_DATA
    318          	LCD_WR_DATA(0x00FF&yStar+3);		
   \   00000048   0x1CE8             ADDS     R0,R5,#+3
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x.... 0x....      BL       LCD_WR_DATA
    319          	LCD_WR_DATA(yEnd>>8);
   \   00000050   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000052   0x0A38             LSRS     R0,R7,#+8
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x.... 0x....      BL       LCD_WR_DATA
    320          	LCD_WR_DATA(0x00FF&yEnd+3);	
   \   0000005A   0x1CF8             ADDS     R0,R7,#+3
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x.... 0x....      BL       LCD_WR_DATA
    321          #endif
    322          
    323          	LCD_WriteRAM_Prepare();	//开始写入GRAM				
   \   00000062   0x.... 0x....      BL       LCD_WriteRAM_Prepare
    324          }   
   \   00000066   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    325          
    326          /*************************************************
    327          函数名：LCD_SetCursor
    328          功能：设置光标位置
    329          入口参数：xy坐标
    330          返回值：无
    331          *************************************************/

   \                                 In section .text, align 2, keep-with-next
    332          void LCD_SetCursor(u16 Xpos, u16 Ypos)
    333          {	  	    			
   \                     LCD_SetCursor:
   \   00000000   0xB580             PUSH     {R7,LR}
    334          	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);
   \   00000002   0x000B             MOVS     R3,R1
   \   00000004   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000006   0x0002             MOVS     R2,R0
   \   00000008   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x.... 0x....      BL       LCD_SetWindows
    335          } 
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    336          
    337          //设置LCD参数
    338          //方便进行横竖屏模式切换

   \                                 In section .text, align 2, keep-with-next
    339          void LCD_SetParam(void)
    340          { 	
   \                     LCD_SetParam:
   \   00000000   0xB580             PUSH     {R7,LR}
    341          	lcddev.wramcmd=0x2C;
   \   00000002   0x....             LDR.N    R0,??DataTable8_1
   \   00000004   0x212C             MOVS     R1,#+44
   \   00000006   0x8101             STRH     R1,[R0, #+8]
    342          #if USE_HORIZONTAL==1	//使用横屏	  
    343          	lcddev.dir=1;//横屏
    344          	lcddev.width=128;
    345          	lcddev.height=128;
    346          	lcddev.setxcmd=0x2A;
    347          	lcddev.setycmd=0x2B;			
    348          	LCD_WriteReg(0x36,0xA8);
    349          
    350          #else//竖屏
    351          	lcddev.dir=0;//竖屏				 	 		
   \   00000008   0x....             LDR.N    R0,??DataTable8_1
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x7181             STRB     R1,[R0, #+6]
    352          	lcddev.width=128;
   \   0000000E   0x....             LDR.N    R0,??DataTable8_1
   \   00000010   0x2180             MOVS     R1,#+128
   \   00000012   0x8001             STRH     R1,[R0, #+0]
    353          	lcddev.height=128;
   \   00000014   0x....             LDR.N    R0,??DataTable8_1
   \   00000016   0x2180             MOVS     R1,#+128
   \   00000018   0x8041             STRH     R1,[R0, #+2]
    354          	lcddev.setxcmd=0x2A;
   \   0000001A   0x....             LDR.N    R0,??DataTable8_1
   \   0000001C   0x212A             MOVS     R1,#+42
   \   0000001E   0x8141             STRH     R1,[R0, #+10]
    355          	lcddev.setycmd=0x2B;	
   \   00000020   0x....             LDR.N    R0,??DataTable8_1
   \   00000022   0x212B             MOVS     R1,#+43
   \   00000024   0x8181             STRH     R1,[R0, #+12]
    356          	LCD_WriteReg(0x36,0xC8);
   \   00000026   0x21C8             MOVS     R1,#+200
   \   00000028   0x2036             MOVS     R0,#+54
   \   0000002A   0x.... 0x....      BL       LCD_WriteReg
    357          #endif
    358          }	
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     GPIOx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     lcddev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     POINT_COLOR
    359          
    360          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  LCD_Clear
             16 -> LCD_SetWindows
             16 -> LCD_WR_DATA_16Bit
        8  LCD_DrawPoint
              8 -> LCD_SetCursor
              8 -> LCD_WR_DATA_16Bit
        8  LCD_Init
              8 -> LCD_RESET
              8 -> LCD_SetParam
              8 -> LCD_WR_DATA
              8 -> LCD_WR_REG
              8 -> delay_ms
        8  LCD_RESET
              8 -> delay_ms
        8  LCD_SetCursor
              8 -> LCD_SetWindows
        8  LCD_SetParam
              8 -> LCD_WriteReg
       24  LCD_SetWindows
             24 -> LCD_WR_DATA
             24 -> LCD_WR_REG
             24 -> LCD_WriteRAM_Prepare
        8  LCD_WR_DATA
              8 -> SPI_Master_WriteRead
        8  LCD_WR_DATA_16Bit
              8 -> SPI_Master_WriteRead
        8  LCD_WR_REG
              8 -> SPI_Master_WriteRead
        8  LCD_WriteRAM_Prepare
              8 -> LCD_WR_REG
        8  LCD_WriteReg
              8 -> LCD_WR_DATA
              8 -> LCD_WR_REG


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       2  BACK_COLOR
       2  DeviceCode
      70  LCD_Clear
      20  LCD_DrawPoint
     548  LCD_Init
      54  LCD_RESET
      20  LCD_SetCursor
      48  LCD_SetParam
     104  LCD_SetWindows
      80  LCD_WR_DATA
      94  LCD_WR_DATA_16Bit
      80  LCD_WR_REG
      12  LCD_WriteRAM_Prepare
      20  LCD_WriteReg
       2  POINT_COLOR
      16  lcddev

 
    20 bytes in section .bss
     2 bytes in section .data
 1 162 bytes in section .text
 
 1 162 bytes of CODE memory
    22 bytes of DATA memory

Errors: none
Warnings: none
