###############################################################################
#                                                                             #
#                                                       16/Aug/2015  08:45:43 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Ping\Desktop\K60_TFT144_SPI\src\drivers\TFT\lcd #
#                    .c                                                       #
#    Command line =  C:\Users\Ping\Desktop\K60_TFT144_SPI\src\drivers\TFT\lcd #
#                    .c -D IAR -D TWR_K60N512 -lCN                            #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\RAM_128KB\List\ -lB C:\Users\Ping\Desktop\K60_TFT144_ #
#                    SPI\build\iar\hello_world\RAM_128KB\List\ -o             #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\RAM_128KB\Obj\ --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\projects\hello_world\ -I                 #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\common\ -I C:\Users\Ping\Desktop\K60_TFT #
#                    144_SPI\build\iar\hello_world\..\..\..\src\cpu\ -I       #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\cpu\headers\ -I                          #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\drivers\adc16\ -I                        #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\drivers\enet\ -I                         #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\drivers\pmc\ -I                          #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\drivers\rtc\ -I                          #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\drivers\lptmr\ -I                        #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\drivers\uart\ -I                         #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\drivers\mcg\ -I                          #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\drivers\wdog\ -I                         #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\platforms\ -I                            #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\drivers\ftm\ -I                          #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\drivers\SPI\ -I                          #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\drivers\OLED\ -I                         #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\..\..\src\drivers\TFT\ -I                          #
#                    C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\..\ -On --use_c++_inline                              #
#    List file    =  C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\RAM_128KB\List\lcd.lst                                #
#    Object file  =  C:\Users\Ping\Desktop\K60_TFT144_SPI\build\iar\hello_wor #
#                    ld\RAM_128KB\Obj\lcd.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Ping\Desktop\K60_TFT144_SPI\src\drivers\TFT\lcd.c
      1          #include "lcd.h"
      2          #include "stdlib.h"
      3          //#include "usart.h"
      4          //#include "delay.h"	 
      5          //////////////////////////////////////////////////////////////////////////////////	
      6          /****************************************************************************************************
      7          //=======================================液晶屏数据线接线==========================================//
      8          //CS		接PB11	//片选信号
      9          //CLK	    接PB13	//SPI时钟信号
     10          //SDI(DIN)	接PB15	//SPI总线数据信号
     11          //=======================================液晶屏控制线接线==========================================//
     12          //LED	    接PB9	//背光控制信号，高电平点亮
     13          //RS(D/C)   接PB10	//寄存器/数据选择信号(RS=0数据总线发送的是指令；RS=1数据总线发送的是像素数据)
     14          //RST	    接PB12	//液晶屏复位信号，低电平复位
     15          /////////////////////////////////////////////////////////////////////////////////////////////////
     16          //==================================如何精简到只需要3个IO=======================================//
     17          //1.CS信号可以精简，不作SPI复用片选可将CS接地常低，节省1个IO
     18          //2.LED背光控制信号可以接高电平3.3V背光常亮，节省1个IO
     19          //3.RST复位信号可以接到单片机的复位端，利用系统上电复位，节省1个IO
     20          //==================================如何切换横竖屏显示=======================================//
     21          //打开lcd.h头文件，修改宏#define USE_HORIZONTAL 值为0使用竖屏模式.1,使用横屏模式
     22          //===========================如何切换模拟SPI总线驱动和硬件SPI总线驱动=========================//
     23          //打开lcd.h头文件，修改宏#define USE_HARDWARE_SPI  值为0使用模拟SPI总线.1,使用硬件SPI总线
     24          **************************************************************************************************/	
     25          
     26          	   
     27          //管理LCD重要参数
     28          //默认为竖屏

   \                                 In section .bss, align 4
     29          _lcd_dev lcddev;
   \                     lcddev:
   \   00000000                      DS8 16
     30          
     31          //画笔颜色,背景颜色

   \                                 In section .bss, align 2
     32          u16 POINT_COLOR = 0x0000,BACK_COLOR = 0xFFFF;  
   \                     POINT_COLOR:
   \   00000000                      DS8 2

   \                                 In section .data, align 2
   \                     BACK_COLOR:
   \   00000000   0xFFFF             DC16 65535

   \                                 In section .bss, align 2
     33          u16 DeviceCode;	 
   \                     DeviceCode:
   \   00000000                      DS8 2
     34          
     35          
     36          //******************************************************************
     37          //函数名：  LCD_WR_REG
     38          //功能：    向液晶屏总线写入写16位指令
     39          //输入参数：Reg:待写入的指令值
     40          //返回值：  无
     41          //修改记录：无
     42          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
     43          void LCD_WR_REG(u16 data)
     44          { 
   \                     LCD_WR_REG:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     45             LCD_CS_CLR;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable7
   \   00000008   0x6880             LDR      R0,[R0, #+8]
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF430 0x7080      BICS     R0,R0,#0x100
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000014   0x6889             LDR      R1,[R1, #+8]
   \   00000016   0x6008             STR      R0,[R1, #+0]
     46             LCD_RS_CLR;
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable7
   \   0000001C   0x6880             LDR      R0,[R0, #+8]
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF430 0x6080      BICS     R0,R0,#0x400
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000028   0x6889             LDR      R1,[R1, #+8]
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     47             SPI_Master_WriteRead(SPI0,data,SPI_PCS4,SPI_PCS_ASSERTED);
   \   0000002C   0x2301             MOVS     R3,#+1
   \   0000002E   0x2210             MOVS     R2,#+16
   \   00000030   0x0021             MOVS     R1,R4
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       SPI_Master_WriteRead
     48             LCD_CS_SET;
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable7
   \   0000003E   0x6880             LDR      R0,[R0, #+8]
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF44F 0x7180      MOV      R1,#+256
   \   00000046   0x4308             ORRS     R0,R1,R0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable7
   \   0000004C   0x6889             LDR      R1,[R1, #+8]
   \   0000004E   0x6008             STR      R0,[R1, #+0]
     49          }
   \   00000050   0xBD10             POP      {R4,PC}          ;; return
     50          
     51          //******************************************************************
     52          //函数名：  LCD_WR_DATA
     53          //功能：    向液晶屏总线写入写8位数据
     54          //输入参数：Data:待写入的数据
     55          //返回值：  无
     56          //修改记录：无
     57          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
     58          void LCD_WR_DATA(u8 data)
     59          {
   \                     LCD_WR_DATA:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     60          	
     61             LCD_CS_CLR;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable7
   \   00000008   0x6880             LDR      R0,[R0, #+8]
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF430 0x7080      BICS     R0,R0,#0x100
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000014   0x6889             LDR      R1,[R1, #+8]
   \   00000016   0x6008             STR      R0,[R1, #+0]
     62             LCD_RS_SET;
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable7
   \   0000001C   0x6880             LDR      R0,[R0, #+8]
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000028   0x6889             LDR      R1,[R1, #+8]
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     63             SPI_Master_WriteRead(SPI0,data,SPI_PCS4,SPI_PCS_ASSERTED);
   \   0000002C   0x2301             MOVS     R3,#+1
   \   0000002E   0x2210             MOVS     R2,#+16
   \   00000030   0x0021             MOVS     R1,R4
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       SPI_Master_WriteRead
     64             LCD_CS_SET;
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable7
   \   0000003E   0x6880             LDR      R0,[R0, #+8]
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF44F 0x7180      MOV      R1,#+256
   \   00000046   0x4308             ORRS     R0,R1,R0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable7
   \   0000004C   0x6889             LDR      R1,[R1, #+8]
   \   0000004E   0x6008             STR      R0,[R1, #+0]
     65          
     66          }
   \   00000050   0xBD10             POP      {R4,PC}          ;; return
     67          //******************************************************************
     68          //函数名：  LCD_DrawPoint_16Bit
     69          //功能：    8位总线下如何写入一个16位数据
     70          //输入参数：(x,y):光标坐标
     71          //返回值：  无
     72          //修改记录：无
     73          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
     74          void LCD_WR_DATA_16Bit(u16 data)
     75          {	
   \                     LCD_WR_DATA_16Bit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     76             LCD_CS_CLR;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable7
   \   00000008   0x6880             LDR      R0,[R0, #+8]
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF430 0x7080      BICS     R0,R0,#0x100
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000014   0x6889             LDR      R1,[R1, #+8]
   \   00000016   0x6008             STR      R0,[R1, #+0]
     77             LCD_RS_SET;
   \   00000018   0x....             LDR.N    R0,??DataTable7
   \   0000001A   0x6880             LDR      R0,[R0, #+8]
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0xF450 0x6080      ORRS     R0,R0,#0x400
   \   00000022   0x....             LDR.N    R1,??DataTable7
   \   00000024   0x6889             LDR      R1,[R1, #+8]
   \   00000026   0x6008             STR      R0,[R1, #+0]
     78          
     79             SPI_Master_WriteRead(SPI0,data>>8,SPI_PCS4,SPI_PCS_ASSERTED);
   \   00000028   0x2301             MOVS     R3,#+1
   \   0000002A   0x2210             MOVS     R2,#+16
   \   0000002C   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002E   0x0A21             LSRS     R1,R4,#+8
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       SPI_Master_WriteRead
     80          
     81             SPI_Master_WriteRead(SPI0,data,SPI_PCS4,SPI_PCS_ASSERTED);
   \   00000038   0x2301             MOVS     R3,#+1
   \   0000003A   0x2210             MOVS     R2,#+16
   \   0000003C   0x0021             MOVS     R1,R4
   \   0000003E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x.... 0x....      BL       SPI_Master_WriteRead
     82          
     83             LCD_CS_SET;
   \   00000046   0x....             LDR.N    R0,??DataTable7
   \   00000048   0x6880             LDR      R0,[R0, #+8]
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF44F 0x7180      MOV      R1,#+256
   \   00000050   0x4308             ORRS     R0,R1,R0
   \   00000052   0x....             LDR.N    R1,??DataTable7
   \   00000054   0x6889             LDR      R1,[R1, #+8]
   \   00000056   0x6008             STR      R0,[R1, #+0]
     84          }
   \   00000058   0xBD10             POP      {R4,PC}          ;; return
     85          
     86          //******************************************************************
     87          //函数名：  LCD_WriteReg
     88          //功能：    写寄存器数据
     89          //输入参数：LCD_Reg:寄存器地址
     90          //			LCD_RegValue:要写入的数据
     91          //返回值：  无
     92          //修改记录：无
     93          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
     94          void LCD_WriteReg(u16 LCD_Reg, u16 LCD_RegValue)
     95          {	
   \                     LCD_WriteReg:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     96          	LCD_WR_REG(LCD_Reg);  
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0x.... 0x....      BL       LCD_WR_REG
     97          	LCD_WR_DATA(LCD_RegValue);	    		 
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       LCD_WR_DATA
     98          }	   
   \   00000016   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     99          	 
    100          //******************************************************************
    101          //函数名：  LCD_WriteRAM_Prepare
    102          //功能：    开始写GRAM
    103          //			在给液晶屏传送RGB数据前，应该发送写GRAM指令
    104          //输入参数：无
    105          //返回值：  无
    106          //修改记录：无
    107          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
    108          void LCD_WriteRAM_Prepare(void)
    109          {
   \                     LCD_WriteRAM_Prepare:
   \   00000000   0xB580             PUSH     {R7,LR}
    110          	LCD_WR_REG(lcddev.wramcmd);
   \   00000002   0x....             LDR.N    R0,??DataTable7_1
   \   00000004   0x8900             LDRH     R0,[R0, #+8]
   \   00000006   0x.... 0x....      BL       LCD_WR_REG
    111          }	 
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    112          
    113          //******************************************************************
    114          //函数名：  LCD_DrawPoint
    115          //功能：    在指定位置写入一个像素点数据
    116          //输入参数：(x,y):光标坐标
    117          //返回值：  无
    118          //修改记录：无
    119          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
    120          void LCD_DrawPoint(u16 x,u16 y)
    121          {
   \                     LCD_DrawPoint:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    122          	LCD_SetCursor(x,y);//设置光标位置 
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000E   0x.... 0x....      BL       LCD_SetCursor
    123          	LCD_WR_DATA_16Bit(POINT_COLOR);
   \   00000012   0x....             LDR.N    R0,??DataTable7_2
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0x.... 0x....      BL       LCD_WR_DATA_16Bit
    124          }
   \   0000001A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    125          
    126          //******************************************************************
    127          //函数名：  LCD_GPIOInit
    128          //功能：    液晶屏IO初始化，液晶初始化前要调用此函数
    129          //输入参数：无
    130          //返回值：  无
    131          //修改记录：无
    132          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
    133          void LCD_GPIOInit(void)
    134          {
    135           
    136          }
   \                     LCD_GPIOInit:
   \   00000000   0x4770             BX       LR               ;; return
    137          
    138          //******************************************************************
    139          //函数名：  LCD_Reset
    140          //功能：    LCD复位函数，液晶初始化前要调用此函数
    141          //输入参数：无
    142          //返回值：  无
    143          //修改记录：无
    144          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
    145          void LCD_RESET(void)
    146          {
   \                     LCD_RESET:
   \   00000000   0xB580             PUSH     {R7,LR}
    147          //	LCD_RST_CLR;
    148          	delay_ms(100);	
   \   00000002   0x2064             MOVS     R0,#+100
   \   00000004   0x.... 0x....      BL       delay_ms
    149          //	LCD_RST_SET;
    150          	delay_ms(50);
   \   00000008   0x2032             MOVS     R0,#+50
   \   0000000A   0x.... 0x....      BL       delay_ms
    151          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    152           	 
    153          //******************************************************************
    154          //函数名：  LCD_Init
    155          //功能：    LCD初始化
    156          //输入参数：无
    157          //返回值：  无
    158          //修改记录：无
    159          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
    160          void LCD_Init(void)
    161          {  
   \                     LCD_Init:
   \   00000000   0xB580             PUSH     {R7,LR}
    162          //#if USE_HARDWARE_SPI //使用硬件SPI
    163          //	SPI2_Init();
    164          //#else	
    165          //	LCD_GPIOInit();//使用模拟SPI
    166          //#endif  										 
    167          
    168           	LCD_RESET(); //液晶屏复位
   \   00000002   0x.... 0x....      BL       LCD_RESET
    169          
    170          	//************* Start Initial Sequence **********//		
    171          	//开始初始化液晶屏
    172          	LCD_WR_REG(0x11);//Sleep exit 
   \   00000006   0x2011             MOVS     R0,#+17
   \   00000008   0x.... 0x....      BL       LCD_WR_REG
    173          	delay_ms (120);		
   \   0000000C   0x2078             MOVS     R0,#+120
   \   0000000E   0x.... 0x....      BL       delay_ms
    174          	//ST7735R Frame Rate
    175          	LCD_WR_REG(0xB1); 
   \   00000012   0x20B1             MOVS     R0,#+177
   \   00000014   0x.... 0x....      BL       LCD_WR_REG
    176          	LCD_WR_DATA(0x01); 
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       LCD_WR_DATA
    177          	LCD_WR_DATA(0x2C); 
   \   0000001E   0x202C             MOVS     R0,#+44
   \   00000020   0x.... 0x....      BL       LCD_WR_DATA
    178          	LCD_WR_DATA(0x2D); 
   \   00000024   0x202D             MOVS     R0,#+45
   \   00000026   0x.... 0x....      BL       LCD_WR_DATA
    179          
    180          	LCD_WR_REG(0xB2); 
   \   0000002A   0x20B2             MOVS     R0,#+178
   \   0000002C   0x.... 0x....      BL       LCD_WR_REG
    181          	LCD_WR_DATA(0x01); 
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       LCD_WR_DATA
    182          	LCD_WR_DATA(0x2C); 
   \   00000036   0x202C             MOVS     R0,#+44
   \   00000038   0x.... 0x....      BL       LCD_WR_DATA
    183          	LCD_WR_DATA(0x2D); 
   \   0000003C   0x202D             MOVS     R0,#+45
   \   0000003E   0x.... 0x....      BL       LCD_WR_DATA
    184          
    185          	LCD_WR_REG(0xB3); 
   \   00000042   0x20B3             MOVS     R0,#+179
   \   00000044   0x.... 0x....      BL       LCD_WR_REG
    186          	LCD_WR_DATA(0x01); 
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x.... 0x....      BL       LCD_WR_DATA
    187          	LCD_WR_DATA(0x2C); 
   \   0000004E   0x202C             MOVS     R0,#+44
   \   00000050   0x.... 0x....      BL       LCD_WR_DATA
    188          	LCD_WR_DATA(0x2D); 
   \   00000054   0x202D             MOVS     R0,#+45
   \   00000056   0x.... 0x....      BL       LCD_WR_DATA
    189          	LCD_WR_DATA(0x01); 
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x.... 0x....      BL       LCD_WR_DATA
    190          	LCD_WR_DATA(0x2C); 
   \   00000060   0x202C             MOVS     R0,#+44
   \   00000062   0x.... 0x....      BL       LCD_WR_DATA
    191          	LCD_WR_DATA(0x2D); 
   \   00000066   0x202D             MOVS     R0,#+45
   \   00000068   0x.... 0x....      BL       LCD_WR_DATA
    192          	
    193          	LCD_WR_REG(0xB4); //Column inversion 
   \   0000006C   0x20B4             MOVS     R0,#+180
   \   0000006E   0x.... 0x....      BL       LCD_WR_REG
    194          	LCD_WR_DATA(0x07); 
   \   00000072   0x2007             MOVS     R0,#+7
   \   00000074   0x.... 0x....      BL       LCD_WR_DATA
    195          	
    196          	//ST7735R Power Sequence
    197          	LCD_WR_REG(0xC0); 
   \   00000078   0x20C0             MOVS     R0,#+192
   \   0000007A   0x.... 0x....      BL       LCD_WR_REG
    198          	LCD_WR_DATA(0xA2); 
   \   0000007E   0x20A2             MOVS     R0,#+162
   \   00000080   0x.... 0x....      BL       LCD_WR_DATA
    199          	LCD_WR_DATA(0x02); 
   \   00000084   0x2002             MOVS     R0,#+2
   \   00000086   0x.... 0x....      BL       LCD_WR_DATA
    200          	LCD_WR_DATA(0x84); 
   \   0000008A   0x2084             MOVS     R0,#+132
   \   0000008C   0x.... 0x....      BL       LCD_WR_DATA
    201          	LCD_WR_REG(0xC1); 
   \   00000090   0x20C1             MOVS     R0,#+193
   \   00000092   0x.... 0x....      BL       LCD_WR_REG
    202          	LCD_WR_DATA(0xC5); 
   \   00000096   0x20C5             MOVS     R0,#+197
   \   00000098   0x.... 0x....      BL       LCD_WR_DATA
    203          
    204          	LCD_WR_REG(0xC2); 
   \   0000009C   0x20C2             MOVS     R0,#+194
   \   0000009E   0x.... 0x....      BL       LCD_WR_REG
    205          	LCD_WR_DATA(0x0A); 
   \   000000A2   0x200A             MOVS     R0,#+10
   \   000000A4   0x.... 0x....      BL       LCD_WR_DATA
    206          	LCD_WR_DATA(0x00); 
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x.... 0x....      BL       LCD_WR_DATA
    207          
    208          	LCD_WR_REG(0xC3); 
   \   000000AE   0x20C3             MOVS     R0,#+195
   \   000000B0   0x.... 0x....      BL       LCD_WR_REG
    209          	LCD_WR_DATA(0x8A); 
   \   000000B4   0x208A             MOVS     R0,#+138
   \   000000B6   0x.... 0x....      BL       LCD_WR_DATA
    210          	LCD_WR_DATA(0x2A); 
   \   000000BA   0x202A             MOVS     R0,#+42
   \   000000BC   0x.... 0x....      BL       LCD_WR_DATA
    211          	LCD_WR_REG(0xC4); 
   \   000000C0   0x20C4             MOVS     R0,#+196
   \   000000C2   0x.... 0x....      BL       LCD_WR_REG
    212          	LCD_WR_DATA(0x8A); 
   \   000000C6   0x208A             MOVS     R0,#+138
   \   000000C8   0x.... 0x....      BL       LCD_WR_DATA
    213          	LCD_WR_DATA(0xEE); 
   \   000000CC   0x20EE             MOVS     R0,#+238
   \   000000CE   0x.... 0x....      BL       LCD_WR_DATA
    214          	
    215          	LCD_WR_REG(0xC5); //VCOM 
   \   000000D2   0x20C5             MOVS     R0,#+197
   \   000000D4   0x.... 0x....      BL       LCD_WR_REG
    216          	LCD_WR_DATA(0x0E); 
   \   000000D8   0x200E             MOVS     R0,#+14
   \   000000DA   0x.... 0x....      BL       LCD_WR_DATA
    217          	
    218          	LCD_WR_REG(0x36); //MX, MY, RGB mode 				 
   \   000000DE   0x2036             MOVS     R0,#+54
   \   000000E0   0x.... 0x....      BL       LCD_WR_REG
    219          	LCD_WR_DATA(0xC8); 
   \   000000E4   0x20C8             MOVS     R0,#+200
   \   000000E6   0x.... 0x....      BL       LCD_WR_DATA
    220          	
    221          	//ST7735R Gamma Sequence
    222          	LCD_WR_REG(0xe0); 
   \   000000EA   0x20E0             MOVS     R0,#+224
   \   000000EC   0x.... 0x....      BL       LCD_WR_REG
    223          	LCD_WR_DATA(0x0f); 
   \   000000F0   0x200F             MOVS     R0,#+15
   \   000000F2   0x.... 0x....      BL       LCD_WR_DATA
    224          	LCD_WR_DATA(0x1a); 
   \   000000F6   0x201A             MOVS     R0,#+26
   \   000000F8   0x.... 0x....      BL       LCD_WR_DATA
    225          	LCD_WR_DATA(0x0f); 
   \   000000FC   0x200F             MOVS     R0,#+15
   \   000000FE   0x.... 0x....      BL       LCD_WR_DATA
    226          	LCD_WR_DATA(0x18); 
   \   00000102   0x2018             MOVS     R0,#+24
   \   00000104   0x.... 0x....      BL       LCD_WR_DATA
    227          	LCD_WR_DATA(0x2f); 
   \   00000108   0x202F             MOVS     R0,#+47
   \   0000010A   0x.... 0x....      BL       LCD_WR_DATA
    228          	LCD_WR_DATA(0x28); 
   \   0000010E   0x2028             MOVS     R0,#+40
   \   00000110   0x.... 0x....      BL       LCD_WR_DATA
    229          	LCD_WR_DATA(0x20); 
   \   00000114   0x2020             MOVS     R0,#+32
   \   00000116   0x.... 0x....      BL       LCD_WR_DATA
    230          	LCD_WR_DATA(0x22); 
   \   0000011A   0x2022             MOVS     R0,#+34
   \   0000011C   0x.... 0x....      BL       LCD_WR_DATA
    231          	LCD_WR_DATA(0x1f); 
   \   00000120   0x201F             MOVS     R0,#+31
   \   00000122   0x.... 0x....      BL       LCD_WR_DATA
    232          	LCD_WR_DATA(0x1b); 
   \   00000126   0x201B             MOVS     R0,#+27
   \   00000128   0x.... 0x....      BL       LCD_WR_DATA
    233          	LCD_WR_DATA(0x23); 
   \   0000012C   0x2023             MOVS     R0,#+35
   \   0000012E   0x.... 0x....      BL       LCD_WR_DATA
    234          	LCD_WR_DATA(0x37); 
   \   00000132   0x2037             MOVS     R0,#+55
   \   00000134   0x.... 0x....      BL       LCD_WR_DATA
    235          	LCD_WR_DATA(0x00); 	
   \   00000138   0x2000             MOVS     R0,#+0
   \   0000013A   0x.... 0x....      BL       LCD_WR_DATA
    236          	LCD_WR_DATA(0x07); 
   \   0000013E   0x2007             MOVS     R0,#+7
   \   00000140   0x.... 0x....      BL       LCD_WR_DATA
    237          	LCD_WR_DATA(0x02); 
   \   00000144   0x2002             MOVS     R0,#+2
   \   00000146   0x.... 0x....      BL       LCD_WR_DATA
    238          	LCD_WR_DATA(0x10); 
   \   0000014A   0x2010             MOVS     R0,#+16
   \   0000014C   0x.... 0x....      BL       LCD_WR_DATA
    239          
    240          	LCD_WR_REG(0xe1); 
   \   00000150   0x20E1             MOVS     R0,#+225
   \   00000152   0x.... 0x....      BL       LCD_WR_REG
    241          	LCD_WR_DATA(0x0f); 
   \   00000156   0x200F             MOVS     R0,#+15
   \   00000158   0x.... 0x....      BL       LCD_WR_DATA
    242          	LCD_WR_DATA(0x1b); 
   \   0000015C   0x201B             MOVS     R0,#+27
   \   0000015E   0x.... 0x....      BL       LCD_WR_DATA
    243          	LCD_WR_DATA(0x0f); 
   \   00000162   0x200F             MOVS     R0,#+15
   \   00000164   0x.... 0x....      BL       LCD_WR_DATA
    244          	LCD_WR_DATA(0x17); 
   \   00000168   0x2017             MOVS     R0,#+23
   \   0000016A   0x.... 0x....      BL       LCD_WR_DATA
    245          	LCD_WR_DATA(0x33); 
   \   0000016E   0x2033             MOVS     R0,#+51
   \   00000170   0x.... 0x....      BL       LCD_WR_DATA
    246          	LCD_WR_DATA(0x2c); 
   \   00000174   0x202C             MOVS     R0,#+44
   \   00000176   0x.... 0x....      BL       LCD_WR_DATA
    247          	LCD_WR_DATA(0x29); 
   \   0000017A   0x2029             MOVS     R0,#+41
   \   0000017C   0x.... 0x....      BL       LCD_WR_DATA
    248          	LCD_WR_DATA(0x2e); 
   \   00000180   0x202E             MOVS     R0,#+46
   \   00000182   0x.... 0x....      BL       LCD_WR_DATA
    249          	LCD_WR_DATA(0x30); 
   \   00000186   0x2030             MOVS     R0,#+48
   \   00000188   0x.... 0x....      BL       LCD_WR_DATA
    250          	LCD_WR_DATA(0x30); 
   \   0000018C   0x2030             MOVS     R0,#+48
   \   0000018E   0x.... 0x....      BL       LCD_WR_DATA
    251          	LCD_WR_DATA(0x39); 
   \   00000192   0x2039             MOVS     R0,#+57
   \   00000194   0x.... 0x....      BL       LCD_WR_DATA
    252          	LCD_WR_DATA(0x3f); 
   \   00000198   0x203F             MOVS     R0,#+63
   \   0000019A   0x.... 0x....      BL       LCD_WR_DATA
    253          	LCD_WR_DATA(0x00); 
   \   0000019E   0x2000             MOVS     R0,#+0
   \   000001A0   0x.... 0x....      BL       LCD_WR_DATA
    254          	LCD_WR_DATA(0x07); 
   \   000001A4   0x2007             MOVS     R0,#+7
   \   000001A6   0x.... 0x....      BL       LCD_WR_DATA
    255          	LCD_WR_DATA(0x03); 
   \   000001AA   0x2003             MOVS     R0,#+3
   \   000001AC   0x.... 0x....      BL       LCD_WR_DATA
    256          	LCD_WR_DATA(0x10);  
   \   000001B0   0x2010             MOVS     R0,#+16
   \   000001B2   0x.... 0x....      BL       LCD_WR_DATA
    257          	
    258          	LCD_WR_REG(0x2a);
   \   000001B6   0x202A             MOVS     R0,#+42
   \   000001B8   0x.... 0x....      BL       LCD_WR_REG
    259          	LCD_WR_DATA(0x00);
   \   000001BC   0x2000             MOVS     R0,#+0
   \   000001BE   0x.... 0x....      BL       LCD_WR_DATA
    260          	LCD_WR_DATA(0x00);
   \   000001C2   0x2000             MOVS     R0,#+0
   \   000001C4   0x.... 0x....      BL       LCD_WR_DATA
    261          	LCD_WR_DATA(0x00);
   \   000001C8   0x2000             MOVS     R0,#+0
   \   000001CA   0x.... 0x....      BL       LCD_WR_DATA
    262          	LCD_WR_DATA(0x7f);
   \   000001CE   0x207F             MOVS     R0,#+127
   \   000001D0   0x.... 0x....      BL       LCD_WR_DATA
    263          
    264          	LCD_WR_REG(0x2b);
   \   000001D4   0x202B             MOVS     R0,#+43
   \   000001D6   0x.... 0x....      BL       LCD_WR_REG
    265          	LCD_WR_DATA(0x00);
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0x.... 0x....      BL       LCD_WR_DATA
    266          	LCD_WR_DATA(0x00);
   \   000001E0   0x2000             MOVS     R0,#+0
   \   000001E2   0x.... 0x....      BL       LCD_WR_DATA
    267          	LCD_WR_DATA(0x00);
   \   000001E6   0x2000             MOVS     R0,#+0
   \   000001E8   0x.... 0x....      BL       LCD_WR_DATA
    268          	LCD_WR_DATA(0x9f);
   \   000001EC   0x209F             MOVS     R0,#+159
   \   000001EE   0x.... 0x....      BL       LCD_WR_DATA
    269          	
    270          	LCD_WR_REG(0xF0); //Enable test command  
   \   000001F2   0x20F0             MOVS     R0,#+240
   \   000001F4   0x.... 0x....      BL       LCD_WR_REG
    271          	LCD_WR_DATA(0x01); 
   \   000001F8   0x2001             MOVS     R0,#+1
   \   000001FA   0x.... 0x....      BL       LCD_WR_DATA
    272          	LCD_WR_REG(0xF6); //Disable ram power save mode 
   \   000001FE   0x20F6             MOVS     R0,#+246
   \   00000200   0x.... 0x....      BL       LCD_WR_REG
    273          	LCD_WR_DATA(0x00); 
   \   00000204   0x2000             MOVS     R0,#+0
   \   00000206   0x.... 0x....      BL       LCD_WR_DATA
    274          	
    275          	LCD_WR_REG(0x3A); //65k mode 
   \   0000020A   0x203A             MOVS     R0,#+58
   \   0000020C   0x.... 0x....      BL       LCD_WR_REG
    276          	LCD_WR_DATA(0x05); 	
   \   00000210   0x2005             MOVS     R0,#+5
   \   00000212   0x.... 0x....      BL       LCD_WR_DATA
    277          	LCD_WR_REG(0x29);//Display on	
   \   00000216   0x2029             MOVS     R0,#+41
   \   00000218   0x.... 0x....      BL       LCD_WR_REG
    278          
    279          	LCD_SetParam();//设置LCD参数	 
   \   0000021C   0x.... 0x....      BL       LCD_SetParam
    280          //	LCD_LED_SET;//点亮背光	 
    281          	//LCD_Clear(WHITE);
    282          }
   \   00000220   0xBD01             POP      {R0,PC}          ;; return
    283          //******************************************************************
    284          //函数名：  LCD_Clear
    285          //功能：    LCD全屏填充清屏函数
    286          //输入参数：Color:要清屏的填充色
    287          //返回值：  无
    288          //修改记录：无
    289          //******************************************************************

   \                                 In section .text, align 2, keep-with-next
    290          void LCD_Clear(u16 Color)
    291          {
   \                     LCD_Clear:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    292          	u16 i,j;      
    293          	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);	  
   \   00000004   0x....             LDR.N    R0,??DataTable7_1
   \   00000006   0x8840             LDRH     R0,[R0, #+2]
   \   00000008   0x1E43             SUBS     R3,R0,#+1
   \   0000000A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000C   0x....             LDR.N    R0,??DataTable7_1
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0x1E42             SUBS     R2,R0,#+1
   \   00000012   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       LCD_SetWindows
    294          	for(i=0;i<lcddev.width;i++)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x0005             MOVS     R5,R0
   \                     ??LCD_Clear_0:
   \   00000020   0x....             LDR.N    R0,??DataTable7_1
   \   00000022   0x8800             LDRH     R0,[R0, #+0]
   \   00000024   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000026   0x4285             CMP      R5,R0
   \   00000028   0xD20E             BCS.N    ??LCD_Clear_1
    295          	{
    296          		for(j=0;j<lcddev.height;j++)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x0006             MOVS     R6,R0
   \                     ??LCD_Clear_2:
   \   0000002E   0x....             LDR.N    R0,??DataTable7_1
   \   00000030   0x8840             LDRH     R0,[R0, #+2]
   \   00000032   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000034   0x4286             CMP      R6,R0
   \   00000036   0xD205             BCS.N    ??LCD_Clear_3
    297          		LCD_WR_DATA_16Bit(Color);	//写入数据 	 
   \   00000038   0x0020             MOVS     R0,R4
   \   0000003A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003C   0x.... 0x....      BL       LCD_WR_DATA_16Bit
   \   00000040   0x1C76             ADDS     R6,R6,#+1
   \   00000042   0xE7F4             B.N      ??LCD_Clear_2
    298          	}
   \                     ??LCD_Clear_3:
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
   \   00000046   0xE7EB             B.N      ??LCD_Clear_0
    299          }   		  
   \                     ??LCD_Clear_1:
   \   00000048   0xBD70             POP      {R4-R6,PC}       ;; return
    300          /*************************************************
    301          函数名：LCD_SetWindows
    302          功能：设置lcd显示窗口，在此区域写点数据自动换行
    303          入口参数：xy起点和终点
    304          返回值：无
    305          *************************************************/

   \                                 In section .text, align 2, keep-with-next
    306          void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
    307          {
   \                     LCD_SetWindows:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    308          #if USE_HORIZONTAL==1	//使用横屏
    309          	LCD_WR_REG(lcddev.setxcmd);	
    310          	LCD_WR_DATA(xStar>>8);
    311          	LCD_WR_DATA(0x00FF&xStar+3);		
    312          	LCD_WR_DATA(xEnd>>8);
    313          	LCD_WR_DATA(0x00FF&xEnd+3);
    314          
    315          	LCD_WR_REG(lcddev.setycmd);	
    316          	LCD_WR_DATA(yStar>>8);
    317          	LCD_WR_DATA(0x00FF&yStar+2);		
    318          	LCD_WR_DATA(yEnd>>8);
    319          	LCD_WR_DATA(0x00FF&yEnd+2);	
    320          
    321          #else
    322          	
    323          	LCD_WR_REG(lcddev.setxcmd);	
   \   0000000A   0x....             LDR.N    R0,??DataTable7_1
   \   0000000C   0x8940             LDRH     R0,[R0, #+10]
   \   0000000E   0x.... 0x....      BL       LCD_WR_REG
    324          	LCD_WR_DATA(xStar>>8);
   \   00000012   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000014   0x0A20             LSRS     R0,R4,#+8
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       LCD_WR_DATA
    325          	LCD_WR_DATA(0x00FF&xStar+2);		
   \   0000001C   0x1CA0             ADDS     R0,R4,#+2
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x.... 0x....      BL       LCD_WR_DATA
    326          	LCD_WR_DATA(xEnd>>8);
   \   00000024   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000026   0x0A30             LSRS     R0,R6,#+8
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x.... 0x....      BL       LCD_WR_DATA
    327          	LCD_WR_DATA(0x00FF&xEnd+2);
   \   0000002E   0x1CB0             ADDS     R0,R6,#+2
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0x.... 0x....      BL       LCD_WR_DATA
    328          
    329          	LCD_WR_REG(lcddev.setycmd);	
   \   00000036   0x....             LDR.N    R0,??DataTable7_1
   \   00000038   0x8980             LDRH     R0,[R0, #+12]
   \   0000003A   0x.... 0x....      BL       LCD_WR_REG
    330          	LCD_WR_DATA(yStar>>8);
   \   0000003E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000040   0x0A28             LSRS     R0,R5,#+8
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x.... 0x....      BL       LCD_WR_DATA
    331          	LCD_WR_DATA(0x00FF&yStar+3);		
   \   00000048   0x1CE8             ADDS     R0,R5,#+3
   \   0000004A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004C   0x.... 0x....      BL       LCD_WR_DATA
    332          	LCD_WR_DATA(yEnd>>8);
   \   00000050   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000052   0x0A38             LSRS     R0,R7,#+8
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x.... 0x....      BL       LCD_WR_DATA
    333          	LCD_WR_DATA(0x00FF&yEnd+3);	
   \   0000005A   0x1CF8             ADDS     R0,R7,#+3
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x.... 0x....      BL       LCD_WR_DATA
    334          #endif
    335          
    336          	LCD_WriteRAM_Prepare();	//开始写入GRAM				
   \   00000062   0x.... 0x....      BL       LCD_WriteRAM_Prepare
    337          }   
   \   00000066   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    338          
    339          /*************************************************
    340          函数名：LCD_SetCursor
    341          功能：设置光标位置
    342          入口参数：xy坐标
    343          返回值：无
    344          *************************************************/

   \                                 In section .text, align 2, keep-with-next
    345          void LCD_SetCursor(u16 Xpos, u16 Ypos)
    346          {	  	    			
   \                     LCD_SetCursor:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    347          	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);
   \   00000006   0x002B             MOVS     R3,R5
   \   00000008   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000A   0x0022             MOVS     R2,R4
   \   0000000C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000016   0x.... 0x....      BL       LCD_SetWindows
    348          } 
   \   0000001A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    349          
    350          //设置LCD参数
    351          //方便进行横竖屏模式切换

   \                                 In section .text, align 2, keep-with-next
    352          void LCD_SetParam(void)
    353          { 	
   \                     LCD_SetParam:
   \   00000000   0xB580             PUSH     {R7,LR}
    354          	lcddev.wramcmd=0x2C;
   \   00000002   0x....             LDR.N    R0,??DataTable7_1
   \   00000004   0x212C             MOVS     R1,#+44
   \   00000006   0x8101             STRH     R1,[R0, #+8]
    355          #if USE_HORIZONTAL==1	//使用横屏	  
    356          	lcddev.dir=1;//横屏
    357          	lcddev.width=128;
    358          	lcddev.height=128;
    359          	lcddev.setxcmd=0x2A;
    360          	lcddev.setycmd=0x2B;			
    361          	LCD_WriteReg(0x36,0xA8);
    362          
    363          #else//竖屏
    364          	lcddev.dir=0;//竖屏				 	 		
   \   00000008   0x....             LDR.N    R0,??DataTable7_1
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x7181             STRB     R1,[R0, #+6]
    365          	lcddev.width=128;
   \   0000000E   0x....             LDR.N    R0,??DataTable7_1
   \   00000010   0x2180             MOVS     R1,#+128
   \   00000012   0x8001             STRH     R1,[R0, #+0]
    366          	lcddev.height=128;
   \   00000014   0x....             LDR.N    R0,??DataTable7_1
   \   00000016   0x2180             MOVS     R1,#+128
   \   00000018   0x8041             STRH     R1,[R0, #+2]
    367          	lcddev.setxcmd=0x2A;
   \   0000001A   0x....             LDR.N    R0,??DataTable7_1
   \   0000001C   0x212A             MOVS     R1,#+42
   \   0000001E   0x8141             STRH     R1,[R0, #+10]
    368          	lcddev.setycmd=0x2B;	
   \   00000020   0x....             LDR.N    R0,??DataTable7_1
   \   00000022   0x212B             MOVS     R1,#+43
   \   00000024   0x8181             STRH     R1,[R0, #+12]
    369          	LCD_WriteReg(0x36,0xC8);
   \   00000026   0x21C8             MOVS     R1,#+200
   \   00000028   0x2036             MOVS     R0,#+54
   \   0000002A   0x.... 0x....      BL       LCD_WriteReg
    370          #endif
    371          }	
   \   0000002E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     GPIOx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     lcddev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     POINT_COLOR
    372          
    373          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  LCD_Clear
             16 -> LCD_SetWindows
             16 -> LCD_WR_DATA_16Bit
       16  LCD_DrawPoint
             16 -> LCD_SetCursor
             16 -> LCD_WR_DATA_16Bit
        0  LCD_GPIOInit
        8  LCD_Init
              8 -> LCD_RESET
              8 -> LCD_SetParam
              8 -> LCD_WR_DATA
              8 -> LCD_WR_REG
              8 -> delay_ms
        8  LCD_RESET
              8 -> delay_ms
       16  LCD_SetCursor
             16 -> LCD_SetWindows
        8  LCD_SetParam
              8 -> LCD_WriteReg
       24  LCD_SetWindows
             24 -> LCD_WR_DATA
             24 -> LCD_WR_REG
             24 -> LCD_WriteRAM_Prepare
        8  LCD_WR_DATA
              8 -> SPI_Master_WriteRead
        8  LCD_WR_DATA_16Bit
              8 -> SPI_Master_WriteRead
        8  LCD_WR_REG
              8 -> SPI_Master_WriteRead
        8  LCD_WriteRAM_Prepare
              8 -> LCD_WR_REG
       16  LCD_WriteReg
             16 -> LCD_WR_DATA
             16 -> LCD_WR_REG


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       2  BACK_COLOR
       2  DeviceCode
      74  LCD_Clear
      28  LCD_DrawPoint
       2  LCD_GPIOInit
     546  LCD_Init
      16  LCD_RESET
      28  LCD_SetCursor
      48  LCD_SetParam
     104  LCD_SetWindows
      82  LCD_WR_DATA
      90  LCD_WR_DATA_16Bit
      82  LCD_WR_REG
      12  LCD_WriteRAM_Prepare
      24  LCD_WriteReg
       2  POINT_COLOR
      16  lcddev

 
    20 bytes in section .bss
     2 bytes in section .data
 1 148 bytes in section .text
 
 1 148 bytes of CODE memory
    22 bytes of DATA memory

Errors: none
Warnings: none
